#include "crow/spectrum.hpp"
#include "crow/unit-test.hpp"

using namespace Crow;

void test_crow_spectrum_enumerations() {

    TEST_EQUAL(to_string(LC::Ia),     "Ia")
    TEST_EQUAL(to_string(LC::Ib),     "Ib")
    TEST_EQUAL(to_string(LC::II),     "II")
    TEST_EQUAL(to_string(LC::III),    "III")
    TEST_EQUAL(to_string(LC::IV),     "IV")
    TEST_EQUAL(to_string(LC::V),      "V")
    TEST_EQUAL(to_string(LC::VI),     "VI")
    TEST_EQUAL(to_string(LC::VII),    "VII")
    TEST_EQUAL(to_string(LC::other),  "other")
    TEST_EQUAL(to_string(Sp::O),      "O")
    TEST_EQUAL(to_string(Sp::B),      "B")
    TEST_EQUAL(to_string(Sp::A),      "A")
    TEST_EQUAL(to_string(Sp::F),      "F")
    TEST_EQUAL(to_string(Sp::G),      "G")
    TEST_EQUAL(to_string(Sp::K),      "K")
    TEST_EQUAL(to_string(Sp::M),      "M")
    TEST_EQUAL(to_string(Sp::L),      "L")
    TEST_EQUAL(to_string(Sp::T),      "T")
    TEST_EQUAL(to_string(Sp::Y),      "Y")
    TEST_EQUAL(to_string(Sp::DA),     "DA")
    TEST_EQUAL(to_string(Sp::DB),     "DB")
    TEST_EQUAL(to_string(Sp::DC),     "DC")
    TEST_EQUAL(to_string(Sp::DO),     "DO")
    TEST_EQUAL(to_string(Sp::DQ),     "DQ")
    TEST_EQUAL(to_string(Sp::DX),     "DX")
    TEST_EQUAL(to_string(Sp::DZ),     "DZ")
    TEST_EQUAL(to_string(Sp::WC),     "WC")
    TEST_EQUAL(to_string(Sp::WN),     "WN")
    TEST_EQUAL(to_string(Sp::WO),     "WO")
    TEST_EQUAL(to_string(Sp::CH),     "CH")
    TEST_EQUAL(to_string(Sp::CHd),    "CHd")
    TEST_EQUAL(to_string(Sp::CJ),     "CJ")
    TEST_EQUAL(to_string(Sp::CN),     "CN")
    TEST_EQUAL(to_string(Sp::CR),     "CR")
    TEST_EQUAL(to_string(Sp::S),      "S")
    TEST_EQUAL(to_string(Sp::NS),     "NS")
    TEST_EQUAL(to_string(Sp::BH),     "BH")

}

void test_crow_spectrum_formatting() {

    Spectrum sp;

    TRY(sp = Spectrum(Sp::O, 3, LC::Ia));    TEST_EQUAL(sp.str(), "O3 Ia")
    TRY(sp = Spectrum(Sp::B, 4, LC::Ia));    TEST_EQUAL(sp.str(), "B4 Ia")
    TRY(sp = Spectrum(Sp::A, 5, LC::Ia));    TEST_EQUAL(sp.str(), "A5 Ia")
    TRY(sp = Spectrum(Sp::F, 6, LC::Ia));    TEST_EQUAL(sp.str(), "F6 Ia")
    TRY(sp = Spectrum(Sp::G, 7, LC::Ia));    TEST_EQUAL(sp.str(), "G7 Ia")
    TRY(sp = Spectrum(Sp::K, 8, LC::Ia));    TEST_EQUAL(sp.str(), "K8 Ia")
    TRY(sp = Spectrum(Sp::M, 9, LC::Ia));    TEST_EQUAL(sp.str(), "M9 Ia")
    TRY(sp = Spectrum(Sp::O, 3, LC::Ib));    TEST_EQUAL(sp.str(), "O3 Ib")
    TRY(sp = Spectrum(Sp::B, 4, LC::Ib));    TEST_EQUAL(sp.str(), "B4 Ib")
    TRY(sp = Spectrum(Sp::A, 5, LC::Ib));    TEST_EQUAL(sp.str(), "A5 Ib")
    TRY(sp = Spectrum(Sp::F, 6, LC::Ib));    TEST_EQUAL(sp.str(), "F6 Ib")
    TRY(sp = Spectrum(Sp::G, 7, LC::Ib));    TEST_EQUAL(sp.str(), "G7 Ib")
    TRY(sp = Spectrum(Sp::K, 8, LC::Ib));    TEST_EQUAL(sp.str(), "K8 Ib")
    TRY(sp = Spectrum(Sp::M, 9, LC::Ib));    TEST_EQUAL(sp.str(), "M9 Ib")
    TRY(sp = Spectrum(Sp::O, 3, LC::II));    TEST_EQUAL(sp.str(), "O3 II")
    TRY(sp = Spectrum(Sp::B, 4, LC::II));    TEST_EQUAL(sp.str(), "B4 II")
    TRY(sp = Spectrum(Sp::A, 5, LC::II));    TEST_EQUAL(sp.str(), "A5 II")
    TRY(sp = Spectrum(Sp::F, 6, LC::II));    TEST_EQUAL(sp.str(), "F6 II")
    TRY(sp = Spectrum(Sp::G, 7, LC::II));    TEST_EQUAL(sp.str(), "G7 II")
    TRY(sp = Spectrum(Sp::K, 8, LC::II));    TEST_EQUAL(sp.str(), "K8 II")
    TRY(sp = Spectrum(Sp::M, 9, LC::II));    TEST_EQUAL(sp.str(), "M9 II")
    TRY(sp = Spectrum(Sp::O, 3, LC::III));   TEST_EQUAL(sp.str(), "O3 III")
    TRY(sp = Spectrum(Sp::B, 4, LC::III));   TEST_EQUAL(sp.str(), "B4 III")
    TRY(sp = Spectrum(Sp::A, 5, LC::III));   TEST_EQUAL(sp.str(), "A5 III")
    TRY(sp = Spectrum(Sp::F, 6, LC::III));   TEST_EQUAL(sp.str(), "F6 III")
    TRY(sp = Spectrum(Sp::G, 7, LC::III));   TEST_EQUAL(sp.str(), "G7 III")
    TRY(sp = Spectrum(Sp::K, 8, LC::III));   TEST_EQUAL(sp.str(), "K8 III")
    TRY(sp = Spectrum(Sp::M, 9, LC::III));   TEST_EQUAL(sp.str(), "M9 III")
    TRY(sp = Spectrum(Sp::O, 3, LC::IV));    TEST_EQUAL(sp.str(), "O3 IV")
    TRY(sp = Spectrum(Sp::B, 4, LC::IV));    TEST_EQUAL(sp.str(), "B4 IV")
    TRY(sp = Spectrum(Sp::A, 5, LC::IV));    TEST_EQUAL(sp.str(), "A5 IV")
    TRY(sp = Spectrum(Sp::F, 6, LC::IV));    TEST_EQUAL(sp.str(), "F6 IV")
    TRY(sp = Spectrum(Sp::G, 7, LC::IV));    TEST_EQUAL(sp.str(), "G7 IV")
    TRY(sp = Spectrum(Sp::K, 8, LC::IV));    TEST_EQUAL(sp.str(), "K8 IV")
    TRY(sp = Spectrum(Sp::M, 9, LC::IV));    TEST_EQUAL(sp.str(), "M9 IV")
    TRY(sp = Spectrum(Sp::O, 3, LC::V));     TEST_EQUAL(sp.str(), "O3 V")
    TRY(sp = Spectrum(Sp::B, 4, LC::V));     TEST_EQUAL(sp.str(), "B4 V")
    TRY(sp = Spectrum(Sp::A, 5, LC::V));     TEST_EQUAL(sp.str(), "A5 V")
    TRY(sp = Spectrum(Sp::F, 6, LC::V));     TEST_EQUAL(sp.str(), "F6 V")
    TRY(sp = Spectrum(Sp::G, 7, LC::V));     TEST_EQUAL(sp.str(), "G7 V")
    TRY(sp = Spectrum(Sp::K, 8, LC::V));     TEST_EQUAL(sp.str(), "K8 V")
    TRY(sp = Spectrum(Sp::M, 9, LC::V));     TEST_EQUAL(sp.str(), "M9 V")
    TRY(sp = Spectrum(Sp::G, 7, LC::VI));    TEST_EQUAL(sp.str(), "G7 VI")
    TRY(sp = Spectrum(Sp::K, 8, LC::VI));    TEST_EQUAL(sp.str(), "K8 VI")
    TRY(sp = Spectrum(Sp::M, 9, LC::VI));    TEST_EQUAL(sp.str(), "M9 VI")
    TRY(sp = Spectrum(Sp::L, 3));            TEST_EQUAL(sp.str(), "L3")
    TRY(sp = Spectrum(Sp::T, 2));            TEST_EQUAL(sp.str(), "T2")
    TRY(sp = Spectrum(Sp::Y, 1));            TEST_EQUAL(sp.str(), "Y1")
    TRY(sp = Spectrum(Sp::DA, 4, LC::VII));  TEST_EQUAL(sp.str(), "DA4")
    TRY(sp = Spectrum(Sp::DB, 3, LC::VII));  TEST_EQUAL(sp.str(), "DB3")
    TRY(sp = Spectrum(Sp::DC, 2, LC::VII));  TEST_EQUAL(sp.str(), "DC2")
    TRY(sp = Spectrum(Sp::DO, 1, LC::VII));  TEST_EQUAL(sp.str(), "DO1")
    TRY(sp = Spectrum(Sp::DQ, 5, LC::VII));  TEST_EQUAL(sp.str(), "DQ5")
    TRY(sp = Spectrum(Sp::DX, 6, LC::VII));  TEST_EQUAL(sp.str(), "DX6")
    TRY(sp = Spectrum(Sp::DZ, 7, LC::VII));  TEST_EQUAL(sp.str(), "DZ7")
    TRY(sp = Spectrum(Sp::WC, 4));           TEST_EQUAL(sp.str(), "WC4")
    TRY(sp = Spectrum(Sp::WN, 3));           TEST_EQUAL(sp.str(), "WN3")
    TRY(sp = Spectrum(Sp::WO, 2));           TEST_EQUAL(sp.str(), "WO2")
    TRY(sp = Spectrum(Sp::CH, 1));           TEST_EQUAL(sp.str(), "C1-H")
    TRY(sp = Spectrum(Sp::CHd, 2));          TEST_EQUAL(sp.str(), "C2-Hd")
    TRY(sp = Spectrum(Sp::CJ, 3));           TEST_EQUAL(sp.str(), "C3-J")
    TRY(sp = Spectrum(Sp::CN, 4));           TEST_EQUAL(sp.str(), "C4-N")
    TRY(sp = Spectrum(Sp::CR, 5));           TEST_EQUAL(sp.str(), "C5-R")
    TRY(sp = Spectrum(Sp::S, 6));            TEST_EQUAL(sp.str(), "S6")
    TRY(sp = Spectrum(Sp::NS));              TEST_EQUAL(sp.str(), "NS")
    TRY(sp = Spectrum(Sp::BH));              TEST_EQUAL(sp.str(), "BH")

}
