#include "crow/hexmap.hpp"
#include "crow/unit-test.hpp"
#include <iostream>

using namespace Crow;

void test_crow_hexmap_ascii_art() {

    Hexmap map;
    Hexmap::hexlist list;

    TEST_EQUAL(map.str(),
        R"( __ )" "\n"
        R"(/  \)" "\n"
        R"(\__/)" "\n"
    );

    TRY(map.set({0,0}, "00"));
    TRY(map.set({1,0}, "10"));
    TRY(map.set({1,1}, "11"));
    TRY(map.set({1,2}, "12"));
    TRY(map.set({1,3}, "13"));
    TRY(map.set({1,4}, "14"));
    TRY(map.set({1,5}, "15"));

    TEST_EQUAL(map.str(),
        R"(    __    )" "\n"
        R"( __/10\__ )" "\n"
        R"(/15\__/11\)" "\n"
        R"(\__/00\__/)" "\n"
        R"(/14\__/12\)" "\n"
        R"(\__/13\__/)" "\n"
        R"(   \__/   )" "\n"
    );

    TRY(map.set_radius(3));

    TEST_EQUAL(map.str(),
        R"(       __       )" "\n"
        R"(    __/  \__    )" "\n"
        R"( __/  \__/  \__ )" "\n"
        R"(/  \__/10\__/  \)" "\n"
        R"(\__/15\__/11\__/)" "\n"
        R"(/  \__/00\__/  \)" "\n"
        R"(\__/14\__/12\__/)" "\n"
        R"(/  \__/13\__/  \)" "\n"
        R"(\__/  \__/  \__/)" "\n"
        R"(   \__/  \__/   )" "\n"
        R"(      \__/      )" "\n"
    );

    TRY(map.set_radius(3));
    TRY(map.set_width(4));

    TEST_EQUAL(map.str(),
        R"(           ____           )" "\n"
        R"(      ____/    \____      )" "\n"
        R"( ____/    \____/    \____ )" "\n"
        R"(/    \____/10  \____/    \)" "\n"
        R"(\____/15  \____/11  \____/)" "\n"
        R"(/    \____/00  \____/    \)" "\n"
        R"(\____/14  \____/12  \____/)" "\n"
        R"(/    \____/13  \____/    \)" "\n"
        R"(\____/    \____/    \____/)" "\n"
        R"(     \____/    \____/     )" "\n"
        R"(          \____/          )" "\n"
    );

    TRY(map.set({2,0}, "20*"));
    TRY(map.set({2,1}, "21*"));
    TRY(map.set({2,2}, "22*"));
    TRY(map.set({2,3}, "23*"));
    TRY(map.set({2,4}, "24*"));
    TRY(map.set({2,5}, "25*"));
    TRY(map.set({2,6}, "26*"));

    TRY(map.set_radius());
    TRY(map.set_width());

    TEST_EQUAL(map.str(),
        R"(         ___         )" "\n"
        R"(     ___/20*\___     )" "\n"
        R"( ___/   \___/21*\___ )" "\n"
        R"(/   \___/10 \___/22*\)" "\n"
        R"(\___/15 \___/11 \___/)" "\n"
        R"(/   \___/00 \___/23*\)" "\n"
        R"(\___/14 \___/12 \___/)" "\n"
        R"(/   \___/13 \___/24*\)" "\n"
        R"(\___/   \___/25*\___/)" "\n"
        R"(    \___/26*\___/    )" "\n"
        R"(        \___/        )" "\n"
    );

    TRY(map.set({0,0}, ""));

    TEST_EQUAL(map.str(),
        R"(         ___         )" "\n"
        R"(     ___/20*\___     )" "\n"
        R"( ___/   \___/21*\___ )" "\n"
        R"(/   \___/10 \___/22*\)" "\n"
        R"(\___/15 \___/11 \___/)" "\n"
        R"(/   \___/   \___/23*\)" "\n"
        R"(\___/14 \___/12 \___/)" "\n"
        R"(/   \___/13 \___/24*\)" "\n"
        R"(\___/   \___/25*\___/)" "\n"
        R"(    \___/26*\___/    )" "\n"
        R"(        \___/        )" "\n"
    );

    TRY(map.erase({1,0}));
    TRY(map.erase({1,3}));

    TEST_EQUAL(map.str(),
        R"(         ___         )" "\n"
        R"(     ___/20*\___     )" "\n"
        R"( ___/   \___/21*\___ )" "\n"
        R"(/   \___/   \___/22*\)" "\n"
        R"(\___/15 \___/11 \___/)" "\n"
        R"(/   \___/   \___/23*\)" "\n"
        R"(\___/14 \___/12 \___/)" "\n"
        R"(/   \___/   \___/24*\)" "\n"
        R"(\___/   \___/25*\___/)" "\n"
        R"(    \___/26*\___/    )" "\n"
        R"(        \___/        )" "\n"
    );

}

void test_crow_hexmap_emoji_art() {

    Hexmap map;

    TRY(map.set({0,0}, "**", {5,3,1}));
    TRY(map.set({1,0}, "üåè", {2,5,2}));
    TRY(map.set({1,1}, "üåπ", {2,2,5}));
    TRY(map.set({1,2}, "üçé", {2,5,2}));
    TRY(map.set({1,3}, "üòÄ", {2,2,5}));
    TRY(map.set({1,4}, "üöÄ", {2,5,2}));
    TRY(map.set({1,5}, "ü¶ä", {2,2,5}));

    TEST_EQUAL(map.str(),
        R"(    __    )" "\n"
        R"( __/üåè\__ )" "\n"
        R"(/ü¶ä\__/üåπ\)" "\n"
        R"(\__/**\__/)" "\n"
        R"(/üöÄ\__/üçé\)" "\n"
        R"(\__/üòÄ\__/)" "\n"
        R"(   \__/   )" "\n"
    );

}

void test_crow_hexmap_xterm_art() {

    Hexmap map;

    TRY(map.set({0,0}, "00", {5,3,1}));
    TRY(map.set({1,0}, "10", {2,5,2}));
    TRY(map.set({1,1}, "11", {2,2,5}));
    TRY(map.set({1,2}, "12", {2,5,2}));
    TRY(map.set({1,3}, "13", {2,2,5}));
    TRY(map.set({1,4}, "14", {2,5,2}));
    TRY(map.set({1,5}, "15", {2,2,5}));

    TEST_EQUAL(map.str(),
        R"(    __    )" "\n"
        R"( __/10\__ )" "\n"
        R"(/15\__/11\)" "\n"
        R"(\__/00\__/)" "\n"
        R"(/14\__/12\)" "\n"
        R"(\__/13\__/)" "\n"
        R"(   \__/   )" "\n"
    );

    TRY(map.set_xterm(true));

    TEST_EQUAL(map.str(),
        "    __    \n"
        " __/\x1b[1m\x1b[38;5;120m10\x1b[0m\\__ \n"
        "/\x1b[1m\x1b[38;5;105m15\x1b[0m\\__/\x1b[1m\x1b[38;5;105m11\x1b[0m\\\n"
        "\\__/\x1b[1m\x1b[38;5;215m00\x1b[0m\\__/\n"
        "/\x1b[1m\x1b[38;5;120m14\x1b[0m\\__/\x1b[1m\x1b[38;5;120m12\x1b[0m\\\n"
        "\\__/\x1b[1m\x1b[38;5;105m13\x1b[0m\\__/\n"
        "   \\__/   \n"
    );

    // std::cout << map;

}
