#!/usr/bin/env bash

# Run this script to increment the patch number and propagate the new version
# to version.hpp. The version number in CMakeLists.txt is the canonical one
# for the project.

set -euo pipefail

if [[ "${PWD##*/}" =~ build ]]; then
    cd ..
fi

cmake_file=$(find . -name CMakeLists.txt)

if ! [ "$cmake_file" ]; then
    echo "*** CMakeLists.txt not found"
    exit 1
fi

version_header=$(find . -name version.hpp -not -path "./*build*")

if ! [ "$version_header" ]; then
    if [ -d source ]; then
        version_header=source/version.hpp
    else
        version_header=version.hpp
    fi
fi

version="$(grep -E '^ *VERSION [0-9.]+$' "$cmake_file" | grep -Eo '[0-9.]+')"
major_version="${version%%.*}"
minor_version=0
patch_version=0
minor_version_etc="${version#*.}"

if [ "$minor_version_etc" != "$version" ]; then
    minor_version="${minor_version_etc%%.*}"
    patch_version_etc="${version#*.*.}"
    if [ "$patch_version_etc" != "$version" ]; then
        patch_version="${patch_version_etc%%.*}"
    fi
fi

namespace=$(grep -EIhr '^ *namespace [A-Za-z]' . \
    | sed -E 's/^ *namespace ([A-Za-z0-9_:]+).*$/\1/' \
    | sort \
    | uniq -c \
    | sort \
    | tail -n 1 \
    | sed -E 's/^ *[0-9]+ +(.+)$/\1/')

if ! [ "$namespace" ]; then
    echo "*** No common namespace was found"
    exit 1
fi

(( ++patch_version ))
new_version="$major_version.$minor_version.$patch_version"
echo "Changing version $version to $new_version"

# sed -i isn't portable
sed -E -e 's/^( *VERSION )[0-9.]+$/\1'"$new_version/" "$cmake_file" > "$cmake_file.out"
mv "$cmake_file.out" "$cmake_file"

cat > "$version_header" << EOF
// This file is generated by the rs-bump-version script

#pragma once

#include <string>
#include <array>

namespace $namespace {

    inline std::array<int, 3> version() noexcept {
        return {{ $major_version, $minor_version, $patch_version }};
    }

    inline std::string version_string() {
        return "$new_version";
    }

}
EOF
