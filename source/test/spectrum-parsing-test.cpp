#include "crow/spectrum.hpp"
#include "crow/unit-test.hpp"

using namespace Crow;
using namespace Crow::Literals;

void test_crow_spectrum_parsing() {

    Spectrum sp;

    TRY(sp = "O3 Ia"_sp);   TEST_EQUAL(sp.cls(), Sp::O);    TEST_EQUAL(sp.sub(), 3)  TEST_EQUAL(sp.lc(), LC::Ia)
    TRY(sp = "B4 Ia"_sp);   TEST_EQUAL(sp.cls(), Sp::B);    TEST_EQUAL(sp.sub(), 4)  TEST_EQUAL(sp.lc(), LC::Ia)
    TRY(sp = "A5 Ia"_sp);   TEST_EQUAL(sp.cls(), Sp::A);    TEST_EQUAL(sp.sub(), 5)  TEST_EQUAL(sp.lc(), LC::Ia)
    TRY(sp = "F6 Ia"_sp);   TEST_EQUAL(sp.cls(), Sp::F);    TEST_EQUAL(sp.sub(), 6)  TEST_EQUAL(sp.lc(), LC::Ia)
    TRY(sp = "G7 Ia"_sp);   TEST_EQUAL(sp.cls(), Sp::G);    TEST_EQUAL(sp.sub(), 7)  TEST_EQUAL(sp.lc(), LC::Ia)
    TRY(sp = "K8 Ia"_sp);   TEST_EQUAL(sp.cls(), Sp::K);    TEST_EQUAL(sp.sub(), 8)  TEST_EQUAL(sp.lc(), LC::Ia)
    TRY(sp = "M9 Ia"_sp);   TEST_EQUAL(sp.cls(), Sp::M);    TEST_EQUAL(sp.sub(), 9)  TEST_EQUAL(sp.lc(), LC::Ia)
    TRY(sp = "O3 Ib"_sp);   TEST_EQUAL(sp.cls(), Sp::O);    TEST_EQUAL(sp.sub(), 3)  TEST_EQUAL(sp.lc(), LC::Ib)
    TRY(sp = "B4 Ib"_sp);   TEST_EQUAL(sp.cls(), Sp::B);    TEST_EQUAL(sp.sub(), 4)  TEST_EQUAL(sp.lc(), LC::Ib)
    TRY(sp = "A5 Ib"_sp);   TEST_EQUAL(sp.cls(), Sp::A);    TEST_EQUAL(sp.sub(), 5)  TEST_EQUAL(sp.lc(), LC::Ib)
    TRY(sp = "F6 Ib"_sp);   TEST_EQUAL(sp.cls(), Sp::F);    TEST_EQUAL(sp.sub(), 6)  TEST_EQUAL(sp.lc(), LC::Ib)
    TRY(sp = "G7 Ib"_sp);   TEST_EQUAL(sp.cls(), Sp::G);    TEST_EQUAL(sp.sub(), 7)  TEST_EQUAL(sp.lc(), LC::Ib)
    TRY(sp = "K8 Ib"_sp);   TEST_EQUAL(sp.cls(), Sp::K);    TEST_EQUAL(sp.sub(), 8)  TEST_EQUAL(sp.lc(), LC::Ib)
    TRY(sp = "M9 Ib"_sp);   TEST_EQUAL(sp.cls(), Sp::M);    TEST_EQUAL(sp.sub(), 9)  TEST_EQUAL(sp.lc(), LC::Ib)
    TRY(sp = "O3 II"_sp);   TEST_EQUAL(sp.cls(), Sp::O);    TEST_EQUAL(sp.sub(), 3)  TEST_EQUAL(sp.lc(), LC::II)
    TRY(sp = "B4 II"_sp);   TEST_EQUAL(sp.cls(), Sp::B);    TEST_EQUAL(sp.sub(), 4)  TEST_EQUAL(sp.lc(), LC::II)
    TRY(sp = "A5 II"_sp);   TEST_EQUAL(sp.cls(), Sp::A);    TEST_EQUAL(sp.sub(), 5)  TEST_EQUAL(sp.lc(), LC::II)
    TRY(sp = "F6 II"_sp);   TEST_EQUAL(sp.cls(), Sp::F);    TEST_EQUAL(sp.sub(), 6)  TEST_EQUAL(sp.lc(), LC::II)
    TRY(sp = "G7 II"_sp);   TEST_EQUAL(sp.cls(), Sp::G);    TEST_EQUAL(sp.sub(), 7)  TEST_EQUAL(sp.lc(), LC::II)
    TRY(sp = "K8 II"_sp);   TEST_EQUAL(sp.cls(), Sp::K);    TEST_EQUAL(sp.sub(), 8)  TEST_EQUAL(sp.lc(), LC::II)
    TRY(sp = "M9 II"_sp);   TEST_EQUAL(sp.cls(), Sp::M);    TEST_EQUAL(sp.sub(), 9)  TEST_EQUAL(sp.lc(), LC::II)
    TRY(sp = "O3 III"_sp);  TEST_EQUAL(sp.cls(), Sp::O);    TEST_EQUAL(sp.sub(), 3)  TEST_EQUAL(sp.lc(), LC::III)
    TRY(sp = "B4 III"_sp);  TEST_EQUAL(sp.cls(), Sp::B);    TEST_EQUAL(sp.sub(), 4)  TEST_EQUAL(sp.lc(), LC::III)
    TRY(sp = "A5 III"_sp);  TEST_EQUAL(sp.cls(), Sp::A);    TEST_EQUAL(sp.sub(), 5)  TEST_EQUAL(sp.lc(), LC::III)
    TRY(sp = "F6 III"_sp);  TEST_EQUAL(sp.cls(), Sp::F);    TEST_EQUAL(sp.sub(), 6)  TEST_EQUAL(sp.lc(), LC::III)
    TRY(sp = "G7 III"_sp);  TEST_EQUAL(sp.cls(), Sp::G);    TEST_EQUAL(sp.sub(), 7)  TEST_EQUAL(sp.lc(), LC::III)
    TRY(sp = "K8 III"_sp);  TEST_EQUAL(sp.cls(), Sp::K);    TEST_EQUAL(sp.sub(), 8)  TEST_EQUAL(sp.lc(), LC::III)
    TRY(sp = "M9 III"_sp);  TEST_EQUAL(sp.cls(), Sp::M);    TEST_EQUAL(sp.sub(), 9)  TEST_EQUAL(sp.lc(), LC::III)
    TRY(sp = "O3 IV"_sp);   TEST_EQUAL(sp.cls(), Sp::O);    TEST_EQUAL(sp.sub(), 3)  TEST_EQUAL(sp.lc(), LC::IV)
    TRY(sp = "B4 IV"_sp);   TEST_EQUAL(sp.cls(), Sp::B);    TEST_EQUAL(sp.sub(), 4)  TEST_EQUAL(sp.lc(), LC::IV)
    TRY(sp = "A5 IV"_sp);   TEST_EQUAL(sp.cls(), Sp::A);    TEST_EQUAL(sp.sub(), 5)  TEST_EQUAL(sp.lc(), LC::IV)
    TRY(sp = "F6 IV"_sp);   TEST_EQUAL(sp.cls(), Sp::F);    TEST_EQUAL(sp.sub(), 6)  TEST_EQUAL(sp.lc(), LC::IV)
    TRY(sp = "G7 IV"_sp);   TEST_EQUAL(sp.cls(), Sp::G);    TEST_EQUAL(sp.sub(), 7)  TEST_EQUAL(sp.lc(), LC::IV)
    TRY(sp = "K8 IV"_sp);   TEST_EQUAL(sp.cls(), Sp::K);    TEST_EQUAL(sp.sub(), 8)  TEST_EQUAL(sp.lc(), LC::IV)
    TRY(sp = "M9 IV"_sp);   TEST_EQUAL(sp.cls(), Sp::M);    TEST_EQUAL(sp.sub(), 9)  TEST_EQUAL(sp.lc(), LC::IV)
    TRY(sp = "O3 V"_sp);    TEST_EQUAL(sp.cls(), Sp::O);    TEST_EQUAL(sp.sub(), 3)  TEST_EQUAL(sp.lc(), LC::V)
    TRY(sp = "B4 V"_sp);    TEST_EQUAL(sp.cls(), Sp::B);    TEST_EQUAL(sp.sub(), 4)  TEST_EQUAL(sp.lc(), LC::V)
    TRY(sp = "A5 V"_sp);    TEST_EQUAL(sp.cls(), Sp::A);    TEST_EQUAL(sp.sub(), 5)  TEST_EQUAL(sp.lc(), LC::V)
    TRY(sp = "F6 V"_sp);    TEST_EQUAL(sp.cls(), Sp::F);    TEST_EQUAL(sp.sub(), 6)  TEST_EQUAL(sp.lc(), LC::V)
    TRY(sp = "G7 V"_sp);    TEST_EQUAL(sp.cls(), Sp::G);    TEST_EQUAL(sp.sub(), 7)  TEST_EQUAL(sp.lc(), LC::V)
    TRY(sp = "K8 V"_sp);    TEST_EQUAL(sp.cls(), Sp::K);    TEST_EQUAL(sp.sub(), 8)  TEST_EQUAL(sp.lc(), LC::V)
    TRY(sp = "M9 V"_sp);    TEST_EQUAL(sp.cls(), Sp::M);    TEST_EQUAL(sp.sub(), 9)  TEST_EQUAL(sp.lc(), LC::V)
    TRY(sp = "G7 VI"_sp);   TEST_EQUAL(sp.cls(), Sp::G);    TEST_EQUAL(sp.sub(), 7)  TEST_EQUAL(sp.lc(), LC::VI)
    TRY(sp = "K8 VI"_sp);   TEST_EQUAL(sp.cls(), Sp::K);    TEST_EQUAL(sp.sub(), 8)  TEST_EQUAL(sp.lc(), LC::VI)
    TRY(sp = "M9 VI"_sp);   TEST_EQUAL(sp.cls(), Sp::M);    TEST_EQUAL(sp.sub(), 9)  TEST_EQUAL(sp.lc(), LC::VI)
    TRY(sp = "L3"_sp);      TEST_EQUAL(sp.cls(), Sp::L);    TEST_EQUAL(sp.sub(), 3)  TEST_EQUAL(sp.lc(), LC::other)
    TRY(sp = "T2"_sp);      TEST_EQUAL(sp.cls(), Sp::T);    TEST_EQUAL(sp.sub(), 2)  TEST_EQUAL(sp.lc(), LC::other)
    TRY(sp = "Y1"_sp);      TEST_EQUAL(sp.cls(), Sp::Y);    TEST_EQUAL(sp.sub(), 1)  TEST_EQUAL(sp.lc(), LC::other)
    TRY(sp = "DA4"_sp);     TEST_EQUAL(sp.cls(), Sp::DA);   TEST_EQUAL(sp.sub(), 4)  TEST_EQUAL(sp.lc(), LC::VII)
    TRY(sp = "DB3"_sp);     TEST_EQUAL(sp.cls(), Sp::DB);   TEST_EQUAL(sp.sub(), 3)  TEST_EQUAL(sp.lc(), LC::VII)
    TRY(sp = "DC2"_sp);     TEST_EQUAL(sp.cls(), Sp::DC);   TEST_EQUAL(sp.sub(), 2)  TEST_EQUAL(sp.lc(), LC::VII)
    TRY(sp = "DO1"_sp);     TEST_EQUAL(sp.cls(), Sp::DO);   TEST_EQUAL(sp.sub(), 1)  TEST_EQUAL(sp.lc(), LC::VII)
    TRY(sp = "DQ5"_sp);     TEST_EQUAL(sp.cls(), Sp::DQ);   TEST_EQUAL(sp.sub(), 5)  TEST_EQUAL(sp.lc(), LC::VII)
    TRY(sp = "DX6"_sp);     TEST_EQUAL(sp.cls(), Sp::DX);   TEST_EQUAL(sp.sub(), 6)  TEST_EQUAL(sp.lc(), LC::VII)
    TRY(sp = "DZ7"_sp);     TEST_EQUAL(sp.cls(), Sp::DZ);   TEST_EQUAL(sp.sub(), 7)  TEST_EQUAL(sp.lc(), LC::VII)
    TRY(sp = "WC4"_sp);     TEST_EQUAL(sp.cls(), Sp::WC);   TEST_EQUAL(sp.sub(), 4)  TEST_EQUAL(sp.lc(), LC::other)
    TRY(sp = "WN3"_sp);     TEST_EQUAL(sp.cls(), Sp::WN);   TEST_EQUAL(sp.sub(), 3)  TEST_EQUAL(sp.lc(), LC::other)
    TRY(sp = "WO2"_sp);     TEST_EQUAL(sp.cls(), Sp::WO);   TEST_EQUAL(sp.sub(), 2)  TEST_EQUAL(sp.lc(), LC::other)
    TRY(sp = "C1-H"_sp);    TEST_EQUAL(sp.cls(), Sp::CH);   TEST_EQUAL(sp.sub(), 1)  TEST_EQUAL(sp.lc(), LC::other)
    TRY(sp = "C2-Hd"_sp);   TEST_EQUAL(sp.cls(), Sp::CHd);  TEST_EQUAL(sp.sub(), 2)  TEST_EQUAL(sp.lc(), LC::other)
    TRY(sp = "C3-J"_sp);    TEST_EQUAL(sp.cls(), Sp::CJ);   TEST_EQUAL(sp.sub(), 3)  TEST_EQUAL(sp.lc(), LC::other)
    TRY(sp = "C4-N"_sp);    TEST_EQUAL(sp.cls(), Sp::CN);   TEST_EQUAL(sp.sub(), 4)  TEST_EQUAL(sp.lc(), LC::other)
    TRY(sp = "C5-R"_sp);    TEST_EQUAL(sp.cls(), Sp::CR);   TEST_EQUAL(sp.sub(), 5)  TEST_EQUAL(sp.lc(), LC::other)
    TRY(sp = "S6"_sp);      TEST_EQUAL(sp.cls(), Sp::S);    TEST_EQUAL(sp.sub(), 6)  TEST_EQUAL(sp.lc(), LC::other)
    TRY(sp = "NS"_sp);      TEST_EQUAL(sp.cls(), Sp::NS);   TEST_EQUAL(sp.sub(), 0)  TEST_EQUAL(sp.lc(), LC::other)
    TRY(sp = "BH"_sp);      TEST_EQUAL(sp.cls(), Sp::BH);   TEST_EQUAL(sp.sub(), 0)  TEST_EQUAL(sp.lc(), LC::other)

}
